Parameters:
  ScheduleExpression:
    Type: String
    Default: cron(0 3 * * ? *)
    Description: 'Lambda 실행 스케줄 (기본: 매일 오전 3시 UTC)'
Resources:
  LogCleanerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LogCleanerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:DeleteLogStream
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: '*'
  LogCleanerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LogCleanerRole.Arn
      Runtime: python3.13
      FunctionName: LogCleanerFunction
      Timeout: 300
      MemorySize: 128
      Code:
        ZipFile: |
          import os
          import time
          import boto3
          from datetime import datetime, timedelta
          from zoneinfo import ZoneInfo  # Python 3.9+ 기본 내장
          
          # 타임존 설정 (Lambda 환경에서 동작 보장)
          os.environ['TZ'] = 'Asia/Seoul'
          time.tzset()
          
          def lambda_handler(event, context):
              logs = boto3.client('logs')
              kst = ZoneInfo('Asia/Seoul')
              now = datetime.now(kst)  # KST 현재 시간
              deleted = 0
          
              # 모든 로그 그룹 조회
              log_groups_paginator = logs.get_paginator('describe_log_groups')
              for groups_page in log_groups_paginator.paginate():
                  for group in groups_page['logGroups']:
                      group_name = group['logGroupName']
                      retention_days = group.get('retentionInDays')
                      
                      # 무한 보존 그룹 건너뛰기
                      if not retention_days:
                          continue
                          
                      # 보존 기간 계산 (KST 기준)
                      cutoff_time = now - timedelta(days=retention_days)
                      
                      # 로그 스트림 조회 및 처리
                      streams_paginator = logs.get_paginator('describe_log_streams')
                      for streams_page in streams_paginator.paginate(logGroupName=group_name):
                          for stream in streams_page['logStreams']:
                              last_event = stream.get('lastEventTimestamp')
                              
                              if last_event:
                                  # UTC 타임스탬프 → KST 시간 변환
                                  event_time = datetime.fromtimestamp(
                                      last_event / 1000,  # 밀리초 → 초 변환
                                      tz=kst
                                  )
                                  
                                  # 보존 기간 초과 시 삭제
                                  if event_time < cutoff_time:
                                      try:
                                          logs.delete_log_stream(
                                              logGroupName=group_name,
                                              logStreamName=stream['logStreamName']
                                          )
                                          deleted += 1
                                      except Exception as e:
                                          print(f"[삭제 실패] {group_name}/{stream['logStreamName']}: {str(e)}")


  LogCleanerSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: !Ref ScheduleExpression
      FlexibleTimeWindow:
        Mode: 'OFF'
      ScheduleExpressionTimezone: Asia/Seoul
      State: ENABLED
      Target:
        Arn: !GetAtt LogCleanerFunction.Arn
        RoleArn: !GetAtt SchedulerExecutionRolePolicy.Arn

  LogCleanerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LogCleanerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LogCleanerSchedule.Arn

  SchedulerExecutionRolePolicy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: SchedulerLambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt LogCleanerFunction.Arn

Outputs:
  LambdaFunctionName:
    Description: Lambda 함수 이름
    Value: !Ref LogCleanerFunction
  LambdaRoleName:
    Description: Lambda 실행 역할 이름
    Value: !Ref LogCleanerRole
  Schedule:
    Description: 실행 스케줄
    Value: !Ref ScheduleExpression
