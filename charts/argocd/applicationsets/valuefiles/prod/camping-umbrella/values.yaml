backend:
  enabled: true
  image:
    repository: ggorockee/py-webapp-backend
    tag: "20250705-9fce8dd"
  extraLabels:
    # 여기에 원하는 추가 레이블을 '키: 값' 형태로 정의
    app: camping
    service: camping-be
    component: webapp
  annotations:
    reloader.stakater.com/auto: "true"
  livenessProbe:
    enabled: true
    path: /healthz/ready # 1번 단계에서 추가한 헬스 체크 경로
    initialDelaySeconds: 30 # 파드가 시작되고 30초 후부터 검사 시작
    periodSeconds: 15 # 15초마다 검사
    timeoutSeconds: 5 # 응답 대기 시간 5초
    failureThreshold: 3 # 3번 연속 실패하면 재시작
  readinessProbe:
    enabled: true
    path: /healthz/ready # livenessProbe와 동일한 경로 사용 가능
    initialDelaySeconds: 10 # liveness보다 먼저, 더 짧게 검사 시작
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 2 # 2번 연속 실패 시 트래픽 차단
  service:
    port: 8000
  ingress:
    enabled: true
    className: "istio"
    annotations: {}
    hosts:
      - camping-api.ggorockee.com
    gateway:
      name: "istio-system/ggorockee-com-gateway"
    httpRoutes:
      # 규칙 1: camping.ggorockee.com -> ggorockee.com 리다이렉션
      # - name: camping-redirect
      #   match:
      #     - authority:
      #         exact: camping.ggorockee.com
      #   redirect:
      #     authority: "ggorockee.com"
      #     redirectCode: 301
      - name: main-app-route
        match:
          - authority:
              exact: "camping-api.ggorockee.com"
            uri:
              prefix: /
        route:
          defaultRoute:
            weight: 100
          extraRoute: {}
          # - host: extraService.ns.svc.cluster.local
          #   port: 8080
          #   weight: 100
  extraConfig:
    - name: django-config
      data:
        DEBUG: "off"
        DJANGO_ALLOWED_HOSTS: ".ggorockee.com,camping-umbrella-backend.camping.svc.cluster.local"
        IN_DOCKER_BUILD: "off"
        ENABLE_ACCESS_LOG: "on"
  extraSecrets: {}
frontend:
  enabled: true
  image:
    repository: ggorockee/webapp-frontend-vue
    tag: "20250705-704f423"
  extraLabels:
    app: camping
    service: camping-fe
    component: webapp
  annotations:
    reloader.stakater.com/auto: "true"
  livenessProbe:
    enabled: true
    path: /healthz/ready # 1번 단계에서 추가한 헬스 체크 경로
    initialDelaySeconds: 30 # 파드가 시작되고 30초 후부터 검사 시작
    periodSeconds: 15 # 15초마다 검사
    timeoutSeconds: 5 # 응답 대기 시간 5초
    failureThreshold: 3 # 3번 연속 실패하면 재시작
  readinessProbe:
    enabled: true
    path: /healthz/ready # livenessProbe와 동일한 경로 사용 가능
    initialDelaySeconds: 10 # liveness보다 먼저, 더 짧게 검사 시작
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 2 # 2번 연속 실패 시 트래픽 차단
  service:
    port: 80
  ingress:
    enabled: true
    className: "istio"
    annotations: {}
    hosts:
      - camping.ggorockee.com
      - ggorockee.com
    gateway:
      name: "istio-system/ggorockee-com-gateway"
    httpRoutes:
      # 규칙 1: camping.ggorockee.com -> ggorockee.com 리다이렉션
      - name: camping-redirect
        match:
          - authority:
              exact: camping.ggorockee.com
        redirect:
          authority: "ggorockee.com"
          redirectCode: 301
      - name: main-app-route
        match:
          - authority:
              exact: "ggorockee.com"
            uri:
              prefix: /
        route:
          defaultRoute:
            weight: 100
          extraRoute: {}
          # - host: extraService.ns.svc.cluster.local
          #   port: 8080
          #   weight: 100
  extraConfig:
    - name: nginx-access-logging
      data:
        access.conf: |
          # geoip 설정
          geoip_country /etc/nginx/GeoIP.dat;
          geoip_city    /etc/nginx/GeoIPCity.dat;

          # JSON 로그 포맷
          log_format json_analytics escape=json '{'
            "msec":"$msec",
            "connection":"$connection",
            "connection_requests":"$connection_requests",
            "pid":"$pid",
            "request_id":"$request_id",
            "request_length":"$request_length",
            "remote_addr":"$remote_addr",
            "remote_user":"$remote_user",
            "remote_port":"$remote_port",
            "time_local":"$time_local",
            "time_iso8601":"$time_iso8601",
            "request":"$request",
            "request_uri":"$request_uri",
            "args":"$args",
            "status":"$status",
            "body_bytes_sent":"$body_bytes_sent",
            "bytes_sent":"$bytes_sent",
            "http_referer":"$http_referer",
            "http_user_agent":"$http_user_agent",
            "http_x_forwarded_for":"$http_x_forwarded_for",
            "http_host":"$http_host",
            "server_name":"$server_name",
            "request_time":"$request_time",
            "upstream":"$upstream_addr",
            "upstream_connect_time":"$upstream_connect_time",
            "upstream_header_time":"$upstream_header_time",
            "upstream_response_time":"$upstream_response_time",
            "upstream_response_length":"$upstream_response_length",
            "upstream_cache_status":"$upstream_cache_status",
            "ssl_protocol":"$ssl_protocol",
            "ssl_cipher":"$ssl_cipher",
            "scheme":"$scheme",
            "request_method":"$request_method",
            "server_protocol":"$server_protocol",
            "pipe":"$pipe",
            "gzip_ratio":"$gzip_ratio",
            "http_cf_ray":"$http_cf_ray",
            "geoip_country_code":"$geoip_country_code"
          '}';

          # 로그를 파일로 남기기
          access_log /var/log/nginx/json_access.log json_analytics;

  extraSecrets: {}
  # - name:
  #   data: {}
postgresql:
  enabled: true
  global:
    postgresql:
      auth:
        username: ggorockee
        database: camping
        existingSecret: camping-db-credentials
  primary:
    annoations:
      reloader.stakater.com/auto: "true"
