initScripts:
  create-pod-phase-pipeline.sh: |
    #!/bin/bash
    set -euo pipefail

    cat <<EOF > /tmp/pipeline.json
    {
      "description": "Convert kubernetes.pod.status.phase to numeric code",
      "processors": [
        {
          "script": {
            "lang": "painless",
            "source": """
              def phase = ctx['kubernetes.pod.status.phase'];
              ctx.pod_phase_code = phase == 'Running'   ? 1 :
                                   phase == 'Pending'   ? 2 :
                                   phase == 'Succeeded' ? 3 :
                                   phase == 'Failed'    ? 4 : 0;
            """
          }
        }
      ]
    }
    EOF

    # 로컬 Elasticsearch REST API에 파이프라인 등록
    curl --fail --silent --show-error \
      -XPUT "http://localhost:9200/_ingest/pipeline/pod_phase_pipeline" \
      -H 'Content-Type: application/json' \
      --data-binary @/tmp/pipeline.json


security:
  enabled: false
  tls:
    restEncryption: false

master:
  masterOnly: false
  replicaCount: 1
  # resources:
  #   limits:
  #     cpu: 1000m
  #     memory: 2Gi
  persistence:
    enabled: true
    size: 30Gi
    storageClass: openebs-hostpath

data:
  replicaCount: 0
  # resources:
  #   limits:
  #     cpu: 1000m
  #     memory: 2Gi
  # persistence:
  #   enabled: false
  #   size: 30Gi
  #   storageClass: openebs-hostpath
      
coordinating:
  replicaCount: 0
  # resources:
  #   limits:
  #     cpu: 1000m
  #     memory: 2Gi

ingest:
  replicaCount: 0
  # resourcesPreset: "nano"
  
  # resources:
  #   limits:
  #     cpu: 1000m
  #     memory: 2Gi
