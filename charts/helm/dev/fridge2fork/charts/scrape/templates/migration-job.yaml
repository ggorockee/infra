{{- if .Values.migration.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "scrape.fullname" . }}-migration
  labels:
    {{- include "scrape.labels" . | nindent 4 }}
    app.kubernetes.io/component: migration
spec:
  {{- if .Values.migration.activeDeadlineSeconds }}
  activeDeadlineSeconds: {{ .Values.migration.activeDeadlineSeconds }}
  {{- end }}
  {{- if .Values.migration.backoffLimit }}
  backoffLimit: {{ .Values.migration.backoffLimit }}
  {{- end }}
  {{- if .Values.migration.ttlSecondsAfterFinished }}
  ttlSecondsAfterFinished: {{ .Values.migration.ttlSecondsAfterFinished }}
  {{- end }}
  template:
    metadata:
      labels:
        {{- include "scrape.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: migration
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "scrape.serviceAccountName" . }}
      restartPolicy: {{ .Values.migration.restartPolicy | default "OnFailure" }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        # Alembic 마이그레이션 실행
        - name: alembic-migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              echo "🔄 데이터베이스 연결 대기 중..."
              timeout=60
              until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; do
                echo "Waiting for database..."
                sleep 2
                timeout=$((timeout - 2))
                if [ $timeout -le 0 ]; then
                  echo "❌ 데이터베이스 연결 타임아웃"
                  exit 1
                fi
              done
              echo "✅ 데이터베이스 연결 성공"

              echo "🔄 Alembic 마이그레이션 시작..."
              cd /app && alembic upgrade head
              echo "✅ Alembic 마이그레이션 완료"

              echo "🔄 기본 데이터 삽입..."
              python scripts/insert_basic_data.py
              echo "✅ 기본 데이터 삽입 완료"
          env:
            - name: MODE
              value: "migration"
            - name: PYTHONPATH
              value: "/app"
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.envFrom[0].secretRef.name }}
                  key: POSTGRES_HOST
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.envFrom[0].secretRef.name }}
                  key: POSTGRES_PORT
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.envFrom[0].secretRef.name }}
                  key: POSTGRES_USER
          envFrom:
            {{- toYaml .Values.envFrom | nindent 12 }}
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
      containers:
        # CSV 데이터 마이그레이션
        - name: csv-migration
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              echo "========================================"
              echo "📚 CSV 마이그레이션 시작"
              echo "========================================"

              # CSV 파일 확인
              echo "🔍 CSV 파일 확인 중..."
              ls -la /app/datas/*.csv || echo "⚠️ CSV 파일이 없습니다. 볼륨이 마운트되었는지 확인하세요."

              # 마이그레이션 실행
              python scripts/migrate_csv_data.py \
                --chunk-size {{ .Values.migration.chunkSize | default 100 }} \
                {{- if .Values.migration.maxRecords }}
                --max-records {{ .Values.migration.maxRecords }}
                {{- end }}

              echo "✅ CSV 마이그레이션 완료"

              # 검증 실행
              echo "🔍 마이그레이션 검증 중..."
              python scripts/verify_migration.py
              echo "✅ 검증 완료"
          env:
            - name: MODE
              value: "migration"
            - name: PYTHONPATH
              value: "/app"
            - name: PYTHONUNBUFFERED
              value: "1"
            {{- if .Values.migration.config }}
            {{- range $key, $value := .Values.migration.config }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          envFrom:
            {{- toYaml .Values.envFrom | nindent 12 }}
          resources:
            {{- toYaml .Values.migration.resources | nindent 12 }}
          {{- if .Values.migration.volumeMounts }}
          volumeMounts:
            {{- toYaml .Values.migration.volumeMounts | nindent 12 }}
          {{- end }}
      {{- if .Values.migration.volumes }}
      volumes:
        {{- toYaml .Values.migration.volumes | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}