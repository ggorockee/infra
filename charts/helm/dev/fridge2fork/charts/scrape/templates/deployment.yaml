{{- if .Values.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "scrape.fullname" . }}
  labels:
    {{- include "scrape.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "scrape.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "scrape.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "scrape.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.initContainer.enabled }}
      initContainers:
        - name: alembic-migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              echo "üîÑ Running Alembic migrations..."
              if alembic upgrade head; then
                echo "‚úÖ Alembic migrations completed successfully"
              else
                echo "‚ùå Alembic migration failed"
                exit 1
              fi
          {{- if .Values.secret.enabled }}
          envFrom:
            - secretRef:
                name: {{ .Values.secret.secretName }}
          {{- end }}
          {{- if .Values.configMap.enabled }}
          env:
            {{- range $key, $value := .Values.configMap.config }}
            - name: {{ $key }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "scrape.fullname" $ }}-config
                  key: {{ $key }}
            {{- end }}
          {{- end }}
          resources:
            {{- toYaml .Values.initContainer.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          {{- if .Values.healthCheck.enabled }}
          livenessProbe:
            {{- toYaml .Values.healthCheck.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.healthCheck.readinessProbe | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.secret.enabled }}
          envFrom:
            - secretRef:
                name: {{ .Values.secret.secretName }}
          {{- end }}
          {{- if .Values.configMap.enabled }}
          env:
            {{- range $key, $value := .Values.configMap.config }}
            - name: {{ $key }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "scrape.fullname" $ }}-config
                  key: {{ $key }}
            {{- end }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
