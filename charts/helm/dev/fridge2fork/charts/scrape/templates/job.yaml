{{- if and .Values.enabled (not .Values.jobDisabled) }}
{{- include "scrape.validateSecret" . -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "scrape.fullname" . }}-v2
  labels:
    {{- include "scrape.labels" . | nindent 4 }}
  {{- if .Values.jobRecreate.enabled }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "{{ .Values.jobRecreate.hookWeight | default "-10" }}"
    "helm.sh/hook-delete-policy": {{ .Values.jobRecreate.deletePolicy | default "before-hook-creation" }}
  {{- end }}
spec:
  {{- if .Values.activeDeadlineSeconds }}
  activeDeadlineSeconds: {{ .Values.activeDeadlineSeconds }}
  {{- end }}
  {{- if .Values.backoffLimit }}
  backoffLimit: {{ .Values.backoffLimit }}
  {{- end }}
  {{- if .Values.ttlSecondsAfterFinished }}
  ttlSecondsAfterFinished: {{ .Values.ttlSecondsAfterFinished }}
  {{- end }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "scrape.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "scrape.serviceAccountName" . }}
      {{- if .Values.restartPolicy }}
      restartPolicy: {{ .Values.restartPolicy }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.initContainer.enabled }}
      initContainers:
        - name: alembic-migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - "/bin/sh"
            - "-c"
            - |
              echo "ðŸš€ Starting Alembic migration..."
              cd /app
              alembic upgrade head
              echo "âœ… Alembic migration completed successfully"
          envFrom:
            {{- toYaml .Values.envFrom | nindent 12 }}
          {{- if .Values.configMap.enabled }}
          env:
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "scrape.fullname" . }}-config
                  key: LOG_LEVEL
            - name: PYTHONPATH
              value: "/app"
            - name: PYTHONUNBUFFERED
              value: "1"
          {{- end }}
          resources:
            {{- toYaml .Values.initContainer.alembic.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - "/bin/sh"
            - "-c"
            - |
              echo "ðŸš€ Starting CSV data migration..."
              cd /app
              python -m app.migration.csv_migration
              echo "âœ… CSV data migration completed successfully"
          {{- if .Values.healthCheck.enabled }}
          livenessProbe:
            {{- toYaml .Values.healthCheck.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.healthCheck.readinessProbe | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          envFrom:
            {{- toYaml .Values.envFrom | nindent 12 }}
          env:
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "scrape.fullname" . }}-config
                  key: LOG_LEVEL
            - name: CHUNK_SIZE
              valueFrom:
                configMapKeyRef:
                  name: {{ include "scrape.fullname" . }}-config
                  key: CHUNK_SIZE
            - name: CHUNK_DELAY
              valueFrom:
                configMapKeyRef:
                  name: {{ include "scrape.fullname" . }}-config
                  key: CHUNK_DELAY
            - name: PYTHONPATH
              value: "/app"
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: MIGRATION_MODE
              value: "csv-only"
            - name: CSV_DATA_PATH
              value: "/app/datas/*.csv"
            {{- if .Values.migration.config }}
            {{- if .Values.migration.config.RUN_ONCE }}
            - name: RUN_ONCE
              value: {{ .Values.migration.config.RUN_ONCE | quote }}
            {{- end }}
            {{- if .Values.migration.config.MAX_RECORDS }}
            - name: MAX_RECORDS
              value: {{ .Values.migration.config.MAX_RECORDS | quote }}
            {{- end }}
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}