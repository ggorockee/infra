{{- if and .Values.enabled (not .Values.jobDisabled) }}
{{- include "scrape.validateSecret" . -}}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "scrape.fullname" . }}-csv-migration
  labels:
    {{- include "scrape.labels" . | nindent 4 }}
    app.kubernetes.io/component: csv-migration
spec:
  # 실질적으로 수동 실행용 (매년 1월 1일 00:00)
  schedule: {{ .Values.cronJob.schedule | default "0 0 1 1 *" | quote }}
  concurrencyPolicy: {{ .Values.cronJob.concurrencyPolicy | default "Forbid" }}
  successfulJobsHistoryLimit: {{ .Values.cronJob.successfulJobsHistoryLimit | default 3 }}
  failedJobsHistoryLimit: {{ .Values.cronJob.failedJobsHistoryLimit | default 1 }}
  {{- if .Values.cronJob.startingDeadlineSeconds }}
  startingDeadlineSeconds: {{ .Values.cronJob.startingDeadlineSeconds }}
  {{- end }}
  jobTemplate:
    metadata:
      labels:
        {{- include "scrape.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: csv-migration
    spec:
      {{- if .Values.activeDeadlineSeconds }}
      activeDeadlineSeconds: {{ .Values.activeDeadlineSeconds }}
      {{- end }}
      {{- if .Values.backoffLimit }}
      backoffLimit: {{ .Values.backoffLimit }}
      {{- end }}
      {{- if .Values.ttlSecondsAfterFinished }}
      ttlSecondsAfterFinished: {{ .Values.ttlSecondsAfterFinished }}
      {{- end }}
      template:
        metadata:
          {{- with .Values.podAnnotations }}
          annotations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          labels:
            {{- include "scrape.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: csv-migration
        spec:
          {{- with .Values.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          serviceAccountName: {{ include "scrape.serviceAccountName" . }}
          {{- if .Values.restartPolicy }}
          restartPolicy: {{ .Values.restartPolicy }}
          {{- end }}
          securityContext:
            {{- toYaml .Values.podSecurityContext | nindent 12 }}
          initContainers:
            - name: wait-for-db
              image: postgres:16-alpine
              envFrom:
                {{- toYaml .Values.envFrom | nindent 16 }}
              command:
                - sh
                - -c
                - |
                  echo "Waiting for PostgreSQL to be ready..."
                  echo "Checking connection to: ${POSTGRES_SERVER}:${POSTGRES_PORT}"

                  # 최대 10분 대기 (scrape job의 activeDeadlineSeconds보다 짧게)
                  MAX_ATTEMPTS=120
                  ATTEMPT=0

                  while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
                    if pg_isready -h ${POSTGRES_SERVER} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} >/dev/null 2>&1; then
                      echo "PostgreSQL is accepting connections!"

                      # 실제 연결 테스트 (인증 확인)
                      if PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_SERVER} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c "SELECT 1" >/dev/null 2>&1; then
                        echo "PostgreSQL connection test successful!"
                        exit 0
                      else
                        echo "PostgreSQL is ready but authentication failed. Waiting..."
                      fi
                    fi

                    ATTEMPT=$((ATTEMPT + 1))
                    echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: PostgreSQL not ready yet. Waiting 5 seconds..."
                    sleep 5
                  done

                  echo "ERROR: PostgreSQL did not become ready within 10 minutes"
                  exit 1
              securityContext:
                runAsNonRoot: false
                runAsUser: 0
          containers:
            - name: {{ .Chart.Name }}
              securityContext:
                {{- toYaml .Values.securityContext | nindent 16 }}
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command:
                - "/bin/sh"
                - "-c"
                - |
                  echo "[INFO] Starting CSV migration directly (bypassing entrypoint.sh wait)"
                  echo "[INFO] Database connection already verified by initContainer"
                  cd /app
                  export MODE=migrate
                  exec python main.py
              resources:
                {{- toYaml .Values.resources | nindent 16 }}
              envFrom:
                {{- toYaml .Values.envFrom | nindent 16 }}
              volumeMounts:
                - name: tmp
                  mountPath: /tmp
                - name: app-tmp
                  mountPath: /app/tmp
              env:
                - name: LOG_LEVEL
                  valueFrom:
                    configMapKeyRef:
                      name: {{ include "scrape.fullname" . }}-config
                      key: LOG_LEVEL
                - name: CHUNK_SIZE
                  valueFrom:
                    configMapKeyRef:
                      name: {{ include "scrape.fullname" . }}-config
                      key: CHUNK_SIZE
                - name: CHUNK_DELAY
                  valueFrom:
                    configMapKeyRef:
                      name: {{ include "scrape.fullname" . }}-config
                      key: CHUNK_DELAY
                - name: PYTHONPATH
                  value: "/app"
                - name: PYTHONUNBUFFERED
                  value: "1"
                - name: MIGRATION_MODE
                  value: "csv-only"
                - name: SKIP_ALEMBIC
                  value: "true"
                - name: CSV_ONLY
                  value: "true"
                - name: CSV_DATA_PATH
                  value: "/app/datas/*.csv"
                {{- if .Values.migration.config }}
                {{- if .Values.migration.config.RUN_ONCE }}
                - name: RUN_ONCE
                  value: {{ .Values.migration.config.RUN_ONCE | quote }}
                {{- end }}
                {{- if .Values.migration.config.MAX_RECORDS }}
                - name: MAX_RECORDS
                  value: {{ .Values.migration.config.MAX_RECORDS | quote }}
                {{- end }}
                {{- end }}
          {{- with .Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumes:
            - name: tmp
              emptyDir: {}
            - name: app-tmp
              emptyDir: {}
{{- end }}