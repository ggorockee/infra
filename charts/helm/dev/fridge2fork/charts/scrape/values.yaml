# Scrape Service Configuration
image:
  repository: ggorockee/fridge2fork-scrape
  tag: sha-8992dffe
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 8000
  targetPort: 8000

resources:
  requests:
    memory: "256Mi"
    cpu: "100m"
  limits:
    memory: "512Mi"
    cpu: "200m"

# Job configuration
activeDeadlineSeconds: 7200  # 2시간 타임아웃
backoffLimit: 3  # 최대 재시도 횟수
restartPolicy: OnFailure
ttlSecondsAfterFinished: 2592000  # 한 달 (30일 * 24시간 * 60분 * 60초)
jobDisabled: true  # scrape job 비활성화

# Job 재생성 설정
jobRecreate:
  enabled: true  # job 재생성 활성화
  deletePolicy: "before-hook-creation"  # 기존 job 삭제 정책
  forceDelete: true  # 강제 삭제

# ServiceAccount configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod security context
podSecurityContext:
  fsGroup: 2000

# Container security context
securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Pod annotations
podAnnotations: {}

# Image pull secrets
imagePullSecrets: []

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Autoscaling
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

# Health check configuration (disabled by default)
healthCheck:
  enabled: false
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Environment variables from secrets
# REQUIRED: This secret must exist before deploying the chart
# The secret should contain database connection information
envFrom:
  - secretRef:
      name: fridge2fork-db-credentials  # Must exist in the namespace

# ConfigMap configuration
configMap:
  enabled: true
  config:
    # 크롤링 설정 (25만개 수집용)
    TARGET_RECIPE_COUNT: "250000"
    CONCURRENT_REQUESTS: "5"
    BATCH_SIZE: "100"
    REQUEST_DELAY: "1"
    BATCH_DELAY: "5"
    
    # 로깅 설정
    LOG_LEVEL: "INFO"
    
    # 모니터링 설정
    PROGRESS_INTERVAL: "1000"
    MEMORY_CHECK_INTERVAL: "10000"
    
    # 메모리 최적화 설정
    CHUNK_SIZE: "1000"
    CHUNK_DELAY: "30"

# Migration Job Configuration
migration:
  enabled: true  # migration job 활성화

  # Job 재생성을 위한 설정
  jobSuffix: ""  # 비어있으면 현재 시각으로 자동 생성 (예: 20240128-143022)

  # Job 기본 설정
  restartPolicy: OnFailure
  activeDeadlineSeconds: 21600  # 6시간 타임아웃 (대용량 CSV 처리 고려)
  backoffLimit: 3  # 최대 재시도 횟수
  ttlSecondsAfterFinished: 86400  # 1일 후 자동 삭제

  # Helm Hook 설정 (선택사항)
  helm:
    hook:
      enabled: true  # Hook 사용 여부
      type: "pre-install,pre-upgrade"  # Hook 타입
      weight: "-10"  # Hook 실행 순서 (-10이 먼저 실행)
      deletePolicy: "before-hook-creation,hook-succeeded"  # Hook 삭제 정책

  # CSV 데이터 마이그레이션 설정
  csvMigration:
    enabled: false  # CSV 마이그레이션 Job 비활성화 (기본값, initContainer 사용)
    chunkSize: 1000  # 배치 처리 크기
    maxRecords: "0"  # 전체 처리 (0), 테스트시 1000 등
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "2Gi"
        cpu: "1000m"

  # Alembic (데이터베이스 스키마) 설정
  alembic:
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "200m"

    # Alembic 관련 환경변수
    config:
      LOG_LEVEL: "INFO"
      ALEMBIC_CONFIG: "alembic.ini"  # Alembic 설정 파일 경로

  # 마이그레이션 관련 환경변수
  config:
    RUN_ONCE: "true"  # 한번만 실행 (true/false)
    MAX_RECORDS: "0"  # 전체 처리 (0), 테스트시 1000 등
    LOG_LEVEL: "INFO"
    PYTHONPATH: "/app"
    PYTHONUNBUFFERED: "1"


# Alembic Job Configuration
alembic:
  enabled: false  # 기본적으로 비활성화
  restartPolicy: Never
  activeDeadlineSeconds: 1800  # 30분 타임아웃
  backoffLimit: 3  # 최대 재시도 횟수
  ttlSecondsAfterFinished: 3600  # 1시간 후 자동 삭제

  # Helm hook 설정 (선택사항)
  hook: ""  # pre-install, pre-upgrade, post-install, post-upgrade 등
  hookWeight: "-5"  # hook 실행 순서
  hookDeletePolicy: "before-hook-creation,hook-succeeded"  # hook 삭제 정책

  # Alembic 리소스
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"

# Init Container Configuration for Alembic Migration
initContainer:
  enabled: false  # 기본적으로 비활성화 (parent values.yaml에서 override)
  alembic:
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "200m"
